<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gougouccnu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-02T15:21:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gougouccnu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我心中的优秀技术人是怎样的</title>
    <link href="http://yoursite.com/2017/03/02/how-good-technician-works/"/>
    <id>http://yoursite.com/2017/03/02/how-good-technician-works/</id>
    <published>2017-03-02T15:11:21.000Z</published>
    <updated>2017-03-02T15:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个芯片应用技术工程师，每天的主要工作就是支持客户定位各种问题。下面说下2种典型的客户类型。对话取材自经验，如有雷同，纯属巧合。  </p>
<p>典型客户A，一般我们的沟通过程是这样的：  </p>
<blockquote>
<p>A： 有个业务不通的问题支持下啊。。<br>我：什么问题啊？<br>A：业务切换后不通<br>我：复现情况是？以前测试有没有问题？<br>A：啊，我也不太清楚，我拉下测试的问下  </p>
</blockquote>
<p>10分钟后  </p>
<blockquote>
<p>A： 不好意思，才联系上，刚问了，以前测试过，没问题。新版本出现的，测试了几次就出了。<br>我：那你先查下XX模块的告警，看到哪里就开始故障了。<br>A：怎么查？我拉下XX问下怎么查。  </p>
</blockquote>
<p>好不容易XX接入进来了，发过来几个查询命令，教A如何使用，如何查看是否正常。20分钟又过去了。  </p>
<blockquote>
<p>A： 查到了，是XX告警，这个可能是啥原因啊？<br>我：可能跟单板上的小逻辑有关系。你在小逻辑那做个XX环回定界下是谁的问题。<br>A：那我再呼下小逻辑的XX问下怎么做环回。  </p>
</blockquote>
<p>。。。  </p>
<p>就这样再经过好几个来回，拉了N个人，确认了M个告警后，才找到问题的原因。  </p>
<p>再来看看典型客户B：   </p>
<blockquote>
<p>B： 我这有个问题，业务路径是XX，做XX测试，以前是OK的，新版本概率出问题，查询XX模块有XX告警，为了定界，我在小逻辑XX模块做了个环回没有问题，应该是芯片的XX模块故障了，帮看下可能是啥原因。<br>我： 你查询下XX配置，看是多少。<br>B： 查了下，是XX。<br>我： 这个地方可能配置不合理，建议修改为XX再对比测试下。  </p>
</blockquote>
<p>谈话间，问题分分钟就解决了。没有对比，就没有伤害。我想谁都喜欢和B合作，也希望自己成为像B一样的人。那看看B都有哪些特质：  </p>
<p><strong>独立分析问题的能力</strong>  </p>
<blockquote>
<p>碰到问题，不是马上拉人。而是独立分析下，实在没办法了才想到求助他人。  </p>
</blockquote>
<p><strong>擅长举一反三</strong>  </p>
<blockquote>
<p>问题出现了，他会思考很多：触发条件？恢复手段？版本差异？如何定界？还会去亲自试验验证自己的判断。  </p>
</blockquote>
<p><strong>不怕问题，遇到问题就来劲，有好奇心</strong>    </p>
<blockquote>
<p>A的口头禅是芯片太复杂了，不懂啊。但在和B的合作过程中，你会发现他想主动了解芯片。   </p>
</blockquote>
<p><strong>善于整理和记录</strong>  </p>
<blockquote>
<p>自己会记录和整理常用的定位命令。  </p>
</blockquote>
<p>。。。(代表其他很多，就不一一列举了)  </p>
<p>以上就是我心中的优秀技术人的特质。大家一起努力吧，成为别人眼中的那个牛A和牛C之间的人。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个芯片应用技术工程师，每天的主要工作就是支持客户定位各种问题。下面说下2种典型的客户类型。对话取材自经验，如有雷同，纯属巧合。  &lt;/p&gt;
&lt;p&gt;典型客户A，一般我们的沟通过程是这样的：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A： 有个业务不通的问题支持下啊。。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记云备份的简单方法</title>
    <link href="http://yoursite.com/2017/02/15/how-to-sync-note/"/>
    <id>http://yoursite.com/2017/02/15/how-to-sync-note/</id>
    <published>2017-02-15T14:57:26.000Z</published>
    <updated>2017-02-18T15:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>小笔记是我做的一个Android APP,一个简单的记录心情笔记的小工具，放到小米和酷安应用商店后，没想到每天还有上百人下载使用。也有用户提需求让增加云备份的功能。群众的需求不能不满足。下面就是我如何设计这个功能的笔记。  </p>
</blockquote>
<p>先看看有了云备份功能后，用户笔记的分布场景  </p>
<ol>
<li>本地有，云上没有  </li>
<li>本地无，云上有  </li>
<li>本地无，云上无   </li>
<li>本地有，云上也有，本地笔记比云上多    </li>
<li>本地有，云上也有，本地笔记比云上少  </li>
</ol>
<p>挨个分析每种场景如何识别和处理。  </p>
<h5 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h5><p>场景1很简单。目前已发布的版本不支持云备份，如果用户升级版本后想用云备份功能就是这种场景了。<br>需要将本地笔记上传到云上。<br>场景识别和对应处理方法：  </p>
<blockquote>
<p>用户首次登陆账号的时候，查询本地有笔记，云上没有时，上传本地笔记到云上。  </p>
<p>考虑到可能会上传失败的情况，在启动APP后，查询发现已经登录情况下，也需要识别是否该场景，如果是,做一次上传。   </p>
</blockquote>
<h5 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h5><p>场景2发生在用户换新手机了，要下载账号上备份在云上的笔记。<br>场景识别和对应处理方法  </p>
<blockquote>
<p>可以在用户首次登陆账号的时候，查询本地和云上的笔记数量来识别该场景。这种场景下下载云上的笔记到本地。</p>
<p>与场景1一样，也要考虑下载可能失败的情况。在启动APP后，查询发现已经登录情况下，如果识别到该场景，做一次下载。    </p>
</blockquote>
<h5 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h5><p>场景3不需要做笔记的上传和下载。  </p>
<h5 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h5><p>场景4就比较复杂了。可能的一种发生原因是：用户非首次登陆，本地新建保存了一条笔记，上传的时候由于网络或服务器问题，上传失败了。</p>
<h5 id="场景5"><a href="#场景5" class="headerlink" title="场景5"></a>场景5</h5><p>场景5发生在本地删除一条笔记，请求服务器也做同步删除时，可能网络或服务器故障导致删除失败。  </p>
<blockquote>
<p>要识别以上2种场景，需要选择一个合适的标记来区分本地和云上的笔记。这个标记需要唯一。正好数据库有笔记id列，是唯一且自增的。可以用它做标记。</p>
</blockquote>
<p>于是对应的处理办法就是这样：  </p>
<blockquote>
<p>启动APP后，查询本地和云上所有笔记，比较本地和云上笔记的id号数量来识别场景4和场景5。</p>
</blockquote>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>5种场景均能识别，也有解决办法，一切看起来很完美了。写完代码验证的时候，发现了2个问题：</p>
<ol>
<li><p>在场景2时，从云上下载到的笔记，保存到本地数据库后，会有新的id。这些id与云上笔记的id是不一样的。  </p>
</li>
<li><p>修改已有笔记，云上无法识别到。  </p>
</li>
</ol>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>刚开始考虑不周，问题出乎意料。不过办法总比困难多，想想怎么解决呢？  </p>
<p>先看问题1，我不想再推倒重来，再设计一次备份机制了。干脆再增加一个字段cmpId,专门用来解决场景5的问题。在场景5时把云上笔记的id复制到本地数据库的cmpId,保证本地数据库cmpId值唯一。当然了，其他场景时本地数据库的cmpId和id保持一致。代价较小，问题得以解决。  </p>
<p>再来看问题2，本地数据库再增加hasModified列。如果本地笔记被修改了，hasModified更新为1。再上传更新后的笔记到云端，上传成功后再将本地笔记数据库的hasModifed列更新为0。步骤有点多，但代价也比较小，问题得以解决。  </p>
<p>以上就是我在笔记APP增加云备份功能时，遇到的问题和解决办法。可能有未识别到的场景，解决办法比较简单粗暴，但目前看满足当前的需求。还没发布，还在测试中，或许还会碰到其他问题，有机会再分享。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;小笔记是我做的一个Android APP,一个简单的记录心情笔记的小工具，放到小米和酷安应用商店后，没想到每天还有上百人下载使用。也有用户提需求让增加云备份的功能。群众的需求不能不满足。下面就是我如何设计这个功能的笔记。  &lt;/p&gt;
&lt;/block
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一次实践用户故事来开发小工具的记录</title>
    <link href="http://yoursite.com/2017/01/26/user-story/"/>
    <id>http://yoursite.com/2017/01/26/user-story/</id>
    <published>2017-01-26T01:25:55.000Z</published>
    <updated>2017-02-15T15:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o81ljhejf.bkt.clouddn.com/use-story.png" alt=""></p>
<blockquote>
<p>用户故事描述了对用户，系统或软件购买者有价值的功能。使用用户故事方法来驱动软件的开发，能尽快交付有价值的软件。如下是我开发一个小工具时，实践用户故事的过程记录。  </p>
</blockquote>
<h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>做芯片应用开发的工程师，难免要和芯片寄存器打交道。海思的很多芯片规模很大，寄存器成千上万。光描述寄存器的excel表格就有几十个，每个表格里面多达几十个页签。想要查找某个寄存器就很困难了，如果想要读写某个寄存器就更麻烦了，想要读取某个寄存器，你需要如下步骤：</p>
<ol>
<li>打开excel，复制寄存器的地址。  </li>
<li>连接上单板环境。  </li>
<li>写好读取脚本，读取到寄存器值。  </li>
<li>去excel里查看寄存器的各bit描述，看读出来的寄存器是否异常。  </li>
</ol>
<p>操作步骤这么多，作为一个在意效率，讨厌重复动作我，简直无法忍受。需要开发一个工具，在这个工具里面就能查看，读写任何一个寄存器。整个过程都必须要在该工具里面完成，提升工作效率。  </p>
<h2 id="定义客户"><a href="#定义客户" class="headerlink" title="定义客户"></a>定义客户</h2><p>想要工具好用，就要从真正使用这个工具的人的角度来开发功能。下面是我整理的可能的软件使用者。  </p>
<ul>
<li>要读写寄存器的工程师  </li>
<li>工具开发者（实际上就是我了）  </li>
</ul>
<p>说明下我是怎么定义这2个客户角色的。<strong>要读写寄存器的工程师</strong> 这个角色看起来比较模糊，不够清晰。是否要具体到软件开发人员，硬件开发人员或者测试人员呢？实际上是不需要的，因为这些角色在使用工具的时候，他们的行为是一样的，都是查看，读写寄存器。    </p>
<p><strong>工具开发者</strong> 需要定义为客户吗？我认为是需要的。我会是这个工具的重度使用者，我除了用到这个工具的读写寄存器功能，还要使用到一些管理和统计功能。比如统计工具的使用人数，推送自动更新，收集客户反馈的工具bug是建议等等。后面会再仔细说明这些功能。   </p>
<h2 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h2><p>初始的故事清单一般需要项目团队专门召开一次故事编写工作坊，通过一两小时的工作坊，大家一起写出尽量多的故事。我这个工具项目比较简单，就由我一个人包办好了。:) 我决定按客户角色来编写用户故事。  </p>
<h3 id="要读写寄存器的工程师的故事"><a href="#要读写寄存器的工程师的故事" class="headerlink" title="要读写寄存器的工程师的故事"></a>要读写寄存器的工程师的故事</h3><blockquote>
<p>用户可以查看所有寄存器信息。例如寄存器所属的模块，基地址，偏移地址，各个bit域的描述和默认值等。  </p>
</blockquote>
<p>简单点说就是要能做到excel里面显示的信息，这个工具基本上也能显示。  </p>
<blockquote>
<p>用户可以用寄存器名字来搜索寄存器  </p>
</blockquote>
<p>excel是支持全量，模糊搜索的。工具也最好能支持。  </p>
<blockquote>
<p>用户可以通过MML,COM和SSH登录要读写寄存器的单板。  </p>
</blockquote>
<p>COM,MML和SSH是三种通信协议。用户最常用的单板连接方式是MML，要优先支持。  </p>
<blockquote>
<p>用户要能看到寄存器读写，MML登录等操作log。  </p>
</blockquote>
<p>给用户及时反馈，用户可及时查看操作状态。  </p>
<blockquote>
<p>用户读写寄存器时，若寄存器模块地址和偏移地址有多个，可以选择其中的某个地址。  </p>
</blockquote>
<p>这个是为了方便指定寄存器的读写地址。  </p>
<blockquote>
<p>用户必须能很快打开某个模块的所有寄存器。  </p>
</blockquote>
<p>这是一个性能要求。使用excel的时候就存在性能慢问题：excel文件打开很慢，尤其是已经打开了好几个excel文档的时候更慢。新工具希望能解决这个问题。  </p>
<p>实际上在开发过程中，有个中间版本由于查询数据库次数太多，导致打开寄存器要5秒以上。如果某个模块寄存器较多，需要十几秒才能打开。这种速度用户已经无法接受了。后来重新设计了数据结构，减少数据库查询次数，将每个模块打开时间缩小到2秒以内。用户就感觉非常快了。  </p>
<h3 id="工具开发者的故事"><a href="#工具开发者的故事" class="headerlink" title="工具开发者的故事"></a>工具开发者的故事</h3><blockquote>
<p>工具要能通用，支持尽可能多的芯片  </p>
</blockquote>
<p>excel格式的寄存器表格式是通用的。只要开发一个小工具，读取excel表格，生成寄存器信息数据库即可。每个芯片对应一个数据库文件，读取不同的芯片，只需要切换数据库文件就好了。  </p>
<blockquote>
<p>工具要能自动更新  </p>
</blockquote>
<p>软件需要尽快交付给客户，通过用户反馈来优化，增加功能。所以初始版本一定要支持自动更新。  </p>
<blockquote>
<p>工具要能收集用户的一些基本信息，如用户名（工号即可），工具打开时间，某个模块打开次数。  </p>
</blockquote>
<p>工具发布出去后，有多少人使用，每天日活多少，哪些功能用户使用的最多。收集到这些信息，可了解工具是否受用户欢迎，用户使用多的功能可以继续优化，用户使用少的功能可以考虑减少开发。  </p>
<blockquote>
<p>工具要有渠道能让用户反馈意见和建议。  </p>
</blockquote>
<p>要让用户反馈信息很方便，不要注册了才能反馈。  </p>
<blockquote>
<p>工具运行中异常信息要能自动反馈。  </p>
</blockquote>
<p>工具发布前我会尽量做好测试，保证基本功能的可用性。但用户使用环境和使用习惯千差万别，很多地方我可能也没考虑到。工具运行过程中的异常状态和错误信息，需要能自动反馈给我。这样我就能在下个版本优化。  </p>
<h2 id="估算故事"><a href="#估算故事" class="headerlink" title="估算故事"></a>估算故事</h2><p>估算故事是为了与开发人员确认每个故事点需要的开发时间，排好需求优先级，好创建版本发布计划。  </p>
<p>这期间开发人员需要知道故事点的更多细节，才能评估出估算点数。所以上一阶段的故事点可能太大，需要估算点数过多，或者很难给出估算点数的故事。就需要拆分为小颗粒的故事点。  </p>
<p>以 <strong>用户可以用寄存器名字来搜索寄存器</strong> 这个故事点来举例说明为什么要拆分以及如何拆分：  </p>
<ul>
<li><p>是否要支持模糊搜索？要做到支持模糊搜索，工作量就大很多了。有很多细节需要考虑，比如搜索的结果太多，如何排列显示？搜索出来的寄存器可能分布在不同模块，如何展示？（因为一次只能展示一个模块的寄存器）等等。  </p>
</li>
<li><p>是否只需要在用户已打开的模块里面搜索？要做到支持在所有模块里面搜索，工作量也会大很多。  </p>
</li>
</ul>
<p>我希望早期的版本的搜索功能能满足用户大部分的搜索需求，同时开发工作量不要太多，好让工具尽快发布。基于这些考虑，我将这个故事拆分为如下2个较小的故事。  </p>
<blockquote>
<p>用户可以搜索已打开模块的寄存器，按寄存器名来搜索，支持有限的模糊搜索（匹配规则为starts with）  </p>
<p>用户可以搜索所有模块的寄存器，按寄存器名来搜索，支持真正的模糊搜索  </p>
</blockquote>
<p>再来分析 <strong>工具要有渠道能让用户反馈意见和建议</strong> 这个故事，作为开发者，我需要知道更多的具体细节来实现这个功能。可能的实现方式有：  </p>
<ul>
<li>提供一个意见反馈按钮，用户点击后输入文字，然后提交。  </li>
<li>提供一个espace（公司的即时聊天工具，功能类似QQ）链接，用户点击后可以通过espace电话或发消息我。  </li>
</ul>
<p>考虑到工具是在公司内部使用，espace沟通的方式用户最熟悉，我决定选择后一种实现方式。   </p>
<p>如下是更新后的故事和对应的估算点数。  </p>
<table>
<thead>
<tr>
<th>故事</th>
<th>估算点数</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户可以查看所有寄存器信息。例如寄存器所属的模块，基地址，偏移地址，各个bit域的描述和默认值等</td>
<td>2  </td>
</tr>
<tr>
<td>用户读写寄存器时，若寄存器模块地址和偏移地址有多个，可以选择其中的某个地址</td>
<td>1 </td>
</tr>
<tr>
<td>用户可以搜索已打开模块的寄存器，按寄存器名来搜索，支持有限的模糊搜索（匹配规则为starts with）</td>
<td>2  </td>
</tr>
<tr>
<td>用户可以搜索所有模块的寄存器，按寄存器名来搜索，支持真正的模糊搜索</td>
<td>4  </td>
</tr>
<tr>
<td>用户可以通过MML登录要读写寄存器的单板</td>
<td>1  </td>
</tr>
<tr>
<td>用户可以通过COM登录要读写寄存器的单板</td>
<td>1  </td>
</tr>
<tr>
<td>用户可以通过SSH登录要读写寄存器的单板</td>
<td>1  </td>
</tr>
<tr>
<td>用户要能看到寄存器读写，MML登录等操作log</td>
<td>1  </td>
</tr>
<tr>
<td>工具要能通用，支持尽可能多的芯片</td>
<td>3  </td>
</tr>
<tr>
<td>工具要能自动更新</td>
<td>1  </td>
</tr>
<tr>
<td>工具要能收集用户的一些基本信息，如用户名（工号即可），工具打开时间，某个模块打开次数</td>
<td>1  </td>
</tr>
<tr>
<td>工具提供一个espace链接，用户点击后可以通过espace电话或发消息我</td>
<td>1  </td>
</tr>
<tr>
<td>工具运行中异常信息要能自动反馈</td>
<td>1   </td>
</tr>
</tbody>
</table>
<h2 id="发布计划"><a href="#发布计划" class="headerlink" title="发布计划"></a>发布计划</h2><p>有了故事和估算点数，根据迭代长度和故事优先级就能安排发布计划了。我想尽快交付这个工具的基本功能，决定了初期的2个迭代版本。可以看出来，迭代1基本覆盖了客户使用该工具的绝大部分场景。</p>
<table>
<thead>
<tr>
<th>迭代1</th>
<th>迭代2  </th>
</tr>
</thead>
<tbody>
<tr>
<td>用户可以查看所有寄存器信息。例如寄存器所属的模块，基地址，偏移地址，各个bit域的描述和默认值等</td>
<td>用户可以搜索所有模块的寄存器，按寄存器名来搜索，支持真正的模糊搜索  </td>
</tr>
<tr>
<td>用户可以搜索已打开模块的寄存器，按寄存器名来搜索，支持有限的模糊搜索（匹配规则为starts with）</td>
<td>用户可通过COM协议登陆要读写寄存器的单板  </td>
</tr>
<tr>
<td>用户要能看到寄存器读写，MML登录等操作log</td>
<td>用户可通过SSH协议登陆要读写寄存器的单板  </td>
</tr>
<tr>
<td>用户读写寄存器时，若寄存器模块地址和偏移地址有多个，可以选择其中的某个地址</td>
<td></td>
</tr>
<tr>
<td>工具要能通用，支持尽可能多的芯片</td>
<td></td>
</tr>
<tr>
<td>工具要能自动更新</td>
<td></td>
</tr>
<tr>
<td>工具要能收集用户的一些基本信息，如用户名（工号即可），工具打开时间，某个模块打开次数</td>
<td></td>
</tr>
<tr>
<td>工具提供一个按钮，用户点击后可以通过espace电话或发消息我，给我反馈意见和建议</td>
<td></td>
</tr>
<tr>
<td>工具运行中异常信息要能自动反馈</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h2><p>故事的验收测试用于决定故事是否完成，一般由客户负责定义测试。我这个工具项目很小，功能也比较简单，就不展开讲了。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o81ljhejf.bkt.clouddn.com/use-story.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户故事描述了对用户，系统或软件购买者有价值的功能。使用用户故事方法来驱动软件的开发，能尽快交付有价值
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《编写可读代码的艺术》的读书笔记</title>
    <link href="http://yoursite.com/2017/01/15/write-readable-code/"/>
    <id>http://yoursite.com/2017/01/15/write-readable-code/</id>
    <published>2017-01-15T06:28:50.000Z</published>
    <updated>2017-01-18T00:24:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.com/images/I/51VJPSjW2DL.jpg" alt="编写可读代码的艺术">  </p>
<blockquote>
<p>本文是最近读《编写可读代码的艺术》的读书笔记，这本书介绍了很多如何编写可读代码的技巧和思想，非常实用。希望每个程序员都能读一读并多实践。每个程序员都想写出好的代码.那到底好代码的判断标准是怎样的呢。可能是设计很巧妙，性能很好，可扩展性好，可维护性好。这些都是好代码的特点，但如果要选一条和每个程序员最有关系的标准，那一定是代码的可读性了。  </p>
</blockquote>
<p>现在的IT产品和系统都很复杂，很少有啥软件产品是程序员一个人从头到尾撸出来的。程序员日常工作里，更多的是要看别人写的代码。做需求或者修改BUG前，要花费大量时间在读代码上。所以代码的可读性就很重要<br>了。即使是自己写的代码，三个月过后你再看的时候，可能也会吐槽，这TM是哪个傻X写的，这几行是啥意思，这个变量是干嘛用的。  </p>
<p>那到底怎么样才能写出可读性好的代码，方便自己和他人呢。是不是非得要成为传说中的大牛才可以？<br>有没有什么快速易学的技巧呢？当然有。这就是我写本文的目的，对有类似疑问，想要让代码可读性好的同学，强烈推荐阅读《编写可读代码的艺术》。  </p>
<p>这本书很薄，大概一周的闲暇时间就能看完，书中都是一些很实用的教你如何写容易理解的代码的小技巧。每个技巧都有举例说明。实践性极强，书中的例子你我都可能遇到过，很可能还是那些写出坏代码的例子。：）  </p>
<p>整本书主要分三部分，由浅到深，由易到难介绍如些写可读性好的代码。  </p>
<p>第一部分是表面层次的改进。首先是如何起名字，名字要表现足够多的信息，不会让人误解。然后是代码<br>审美的改进，比如要分段落，有必要时使用列对齐，保持一致性等。最后介绍了该写怎样的注释，如何写<br>好的注释。都是一些很容易实践的技巧，可以马上应用到日常工作中，效果立竿见影。  </p>
<p>第二部分是通过简化逻辑和循环让代码更容易让人理解。作者介绍了一些很有用的方法，比如如何把控制流变得简单易读，如何减少代码嵌套，如何拆分超长的表达式。坏的代码一般会见到大量的变量，而且变量的值被<br>多次修改，难以跟踪最后的值。好的代码变量一定是可控的，本书就介绍了一些如何减少变量，缩小变量作用域的方法。  </p>
<p>前2个部分只需要对代码做很小的修改，第三个部分是关于如何重新组织代码，增加代码可读性的，对代码的改动会相对大一些。介绍的方法有：抽取不相关的子问题让高层目标清晰易读；如何拆分任务，一次只做一件事；如何用自然语言描述解决方案并把想法变为代码。好的代码一定是简洁的，作者也给出了一些如何少写代码的方法和建议。  </p>
<p>以上只是简单介绍了这本书的主要部分，文末附有我整理的这本书的一些思维导图。更多好的思想和方法，最好拿起书好好读一些，相信你看完后一定会有收获。让我们多写些让人容易理解的代码，多获得他人的赞赏和尊重。<br><img src="http://o81ljhejf.bkt.clouddn.com/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF.jpg" alt="思维导图">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images-cn.ssl-images-amazon.com/images/I/51VJPSjW2DL.jpg&quot; alt=&quot;编写可读代码的艺术&quot;&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文是最近读《编写可读代码的艺术》的读书笔记
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>武汉敏捷之旅活动记录</title>
    <link href="http://yoursite.com/2016/12/20/wuhan-alige-record/"/>
    <id>http://yoursite.com/2016/12/20/wuhan-alige-record/</id>
    <published>2016-12-20T06:28:31.000Z</published>
    <updated>2017-01-15T06:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周六参加了敏捷之旅武汉站活动，第一次参加这种民间组织活动，没想到参加的人挺多的，现场来了100多号人，而且妹子还不少，考虑到这次活动还是有门票的，需要付费参与（门票不贵，50多），说明武汉的互联网和软件开发氛围越来越好了。  </p>
<p>我对敏捷开发的认识不多，只是看过敏捷相关的书，知道一些敏捷开发的思想，原则和一些方法，比如用户故事，小卡片，迭代等。参加这次活动，主要是满足好奇心，想体验下互联网行业的开放，分享，也想听听他们做敏捷实践的案例和感受。  </p>
<p>活动是全天的，密集安排了7个讲座分享，我挑几个印象最深，比较感兴趣的分享记录下。  </p>
<p>第一个是来自华为的精益敏捷专家陈军分享的《华为精益看板产品开发探索之路》。在我看来，业界好的工具，方法，华为向来是不排斥的，都会拿来用。可最终效果怎么样，千万不要看内部表扬邮件或优先实践总结。要问问一线的开发同事，十有八九他们会苦笑着对你说：又多了一个东西折腾我们啊。  </p>
<p>和陈军私下交流了看板在华为的落地效果。了解到看板对一线开发同事的开发流程和工作的影响很小。可以简单类比下，华为最传统的是搞个excel，写上问题描述，当前进展和下一步计划，Notes群发相关人员（也是我经常干的）。看板可以替代群发邮件，让管理者，周边团队和项目组同事都能看到项目各种关键信息，聚焦版本的快速发布。或许真的有效果，有机会找体验过的同事采访下。  </p>
<p>第二个印象较深的是Thoughtworks的业务分析师康诚佳MM分析的一个敏捷开发案例。康MM原来是给健康医疗行业做管理咨询的，通俗点说就是大家常见的美容美体行业。这个行业有个特点：客户都是有钱的主，可做服务的小妹一般可能学历低，流动性大。康MM的团队觉得给他们出个管理方案问题不大。很快方案出来了，客户老板抛出个问题：方案很好，可他们这行业，员工流动性太大了，好不容易培训出一批来，没多久就走光了，经验无法传承，再培训的成本很大。  </p>
<p>康MM的团队很快想出了解决办法。做个IT工具，简单好用的，换了员工很快就能上手的。当时人力和资源有限，第一个版本就实现了一个功能：电子记账。客户老板用了之后，觉得很不错，帮他管好了钱。又提了个需求，看能不能管理好客户。于是就有了第二个版本：简单的CRM。客户老板用的很爽，于是又一起讨论交流，有了第3个功能：计划和任务管理。最后做出来了一个全服务流程管理工具。  </p>
<p>于是，康MM的团队和客户一起在不知不觉中完成一个教科书般的敏捷实践。完全落地了敏捷开发的思想和原则：和客户充分交流需求，迭代交付，每个版本聚焦价值交付。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周六参加了敏捷之旅武汉站活动，第一次参加这种民间组织活动，没想到参加的人挺多的，现场来了100多号人，而且妹子还不少，考虑到这次活动还是有门票的，需要付费参与（门票不贵，50多），说明武汉的互联网和软件开发氛围越来越好了。  &lt;/p&gt;
&lt;p&gt;我对敏捷开发的认识不多，只是看
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>wuhan-offline-party</title>
    <link href="http://yoursite.com/2016/12/15/wuhan-offline-party/"/>
    <id>http://yoursite.com/2016/12/15/wuhan-offline-party/</id>
    <published>2016-12-15T06:28:09.000Z</published>
    <updated>2017-01-15T06:45:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>小波同学组织的武汉线下聚会活动已经过去一周了，懒癌发作，一直拖到现在才写。  </p>
<p>这次活动一共来了4位同学，如大家所料，4位汉子。：）。本来难得有位妹子报名了，公司组织了活动，回来太晚赶不过来了，遗憾啊。。。  </p>
<p>扯远了，话归正题。大家初次见面，简单say hello后，小波果然是线下活动组织的老司机，抛出了聚会讨论问题的杀手锏：投票选择话题法。顿时让我耳目一新（原谅小弟没怎么见过世面啊），玩法是这样的：  </p>
<ol>
<li>每位同学抛出自己感兴趣的2个话题  </li>
<li>每人有2票，从所有话题里面选择想讨论的2个话题来投票，1个话题投1票  </li>
<li>统计每个话题的票数，从高到低排列。优先讨论高票数的话题，限时10分钟。10分钟后，如果大家觉得意犹未尽，可以投票决定是否要继续下一个10分钟；否则的话，可开始下一个话题。  </li>
</ol>
<p>怎么样，是不是感觉很好玩，很刺激，有没有现在就想拉一波人来实践下的冲动？  </p>
<p>又扯远了，好了，下面就是我们讨论出来的话题，排名按得票数从高到低来：  </p>
<ol>
<li>如何快速成长  </li>
<li>怎么突破瓶颈  </li>
<li>转行的思考    </li>
<li>TDD的困惑 </li>
</ol>
<p>下面直奔主题，依次总结下干货：  </p>
<ol>
<li>持续学习，学习的内容要由市场需求驱动，应用驱动。如果觉得工作实在没有挑战，或许该考虑马上换有挑战的工作了。  </li>
<li>瓶颈是一直伴随我们的，要选择直面他，突破他。<br>小波推荐了2本书，《发现你的优势》和《发现你的职业优势》，可以读一下，做里面一个很有价值的测试题来发现你适合做什么  </li>
<li>年轻的时候想转行要尽快，做了才晓得适合不适合。年纪大了，要考虑的东西多了，要转行就要做充分的准备，三思而后行。但也不要畏首畏尾，要长远看，看到5年，10年后，要做自己喜欢和擅长的事情。  </li>
<li>TDD是方法论和工具。如果能在纸上做好设计，想清楚了，就不必拘泥于形式，可不用写详细的测试用例，甚至可不写了。小波也给我们分享了TDD的相关理念和实际方法。  </li>
</ol>
<p>快乐的时光总是短暂的，2个小时一晃就过去了，小波同学虽然依依不舍，但飞机不等人，不得不say goodbye了。再次感谢小波同学的分享，武汉大伙的参与。简单总结了下，流水账一般，有遗漏的伙伴们欢迎补充啊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小波同学组织的武汉线下聚会活动已经过去一周了，懒癌发作，一直拖到现在才写。  &lt;/p&gt;
&lt;p&gt;这次活动一共来了4位同学，如大家所料，4位汉子。：）。本来难得有位妹子报名了，公司组织了活动，回来太晚赶不过来了，遗憾啊。。。  &lt;/p&gt;
&lt;p&gt;扯远了，话归正题。大家初次见面，简
    
    </summary>
    
    
  </entry>
  
</feed>
